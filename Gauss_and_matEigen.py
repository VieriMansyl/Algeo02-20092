# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W5yXVgo9Mf3F_wC4Uuru6G5QO4JneZpk
"""

import numpy as np
from scipy.linalg import lu

#mencari baris dengan 1 utama di kolom yang berkorespondesi pada baris tersebut
def getRowMain(mat , i):
  found1Utama = False
  row         = i+1

  while (row > 0 and not(found1Utama)):
    row -= 1
    col  = 0
    nonZero = False

    while (col <= i-1 and not(nonZero)):
      if(mat[row][col] != 0):
        nonZero = True
      else:
        col+=1

    if (not(nonZero) and (mat[row][col] == 1)):
      found1Utama = True

  if ((row==0) and not (found1Utama)):
    row = 999

  return row

#mengembalikan nilai tiap variabel (x1,x2,...x ke-n) bersesuaian pada matriks
def getValue(mat):
  idx_UNDEF = 999
  paramCol = 0

  #inisialisasi matriks solusi -> menyimpan nilai konstanta berserta keof. parameternya
  solusi = [[0 for i in range(len(mat[0]))] for j in range(len(mat[0])-1)]

  for i in range(len(mat)-1 , -1 ,-1):        #dari X ke-n s.d. X1
    if (getRowMain(mat , i) == idx_UNDEF):
      paramCol+=1
      solusi[i][paramCol] = 1
    else:
      rowMain = getRowMain(mat , i)
      for j in range(0 , paramCol , 1):       #C , p , q , dst (C : constant ; p,q,... : parameter)
        if (j==0):
          solusi[i][j] = mat[rowMain][len(mat[i])-1]

        for k in range(i+1 , len(mat),1):     #kurangi C1 , C2 ,...
          solusi[i][j] -= mat[rowMain][k] * solusi[k][j]
  
  return solusi

#mengembalikan matriks berisikan vektor-vektor eigen
def solveGauss(mat):
  lowMat , upperMat = lu(mat , permute_l = True)
  solusi = getValue(upperMat)

  return solusi


#membentuk matriks Eigen (pembentuk matriks U dan V)
def makeMatEigen(mat , matEigen):
  if (len(matEigen) == 0):
    matEigen = []
  else:
    transpose_solusi = np.transpose(mat)
    for i in range(1 , len(mat[0])):
      matEigen.append(transpose_solusi[i])
    
  return matEigen